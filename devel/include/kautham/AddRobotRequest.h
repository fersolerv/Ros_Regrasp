// Generated by gencpp from file kautham/AddRobotRequest.msg
// DO NOT EDIT!


#ifndef KAUTHAM_MESSAGE_ADDROBOTREQUEST_H
#define KAUTHAM_MESSAGE_ADDROBOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kautham/fVector.h>
#include <kautham/fVector.h>

namespace kautham
{
template <class ContainerAllocator>
struct AddRobotRequest_
{
  typedef AddRobotRequest_<ContainerAllocator> Type;

  AddRobotRequest_()
    : robot()
    , scale(0.0)
    , home()
    , limits()
    , mapMatrix()
    , offMatrix()  {
    }
  AddRobotRequest_(const ContainerAllocator& _alloc)
    : robot(_alloc)
    , scale(0.0)
    , home(_alloc)
    , limits(_alloc)
    , mapMatrix(_alloc)
    , offMatrix(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_type;
  _robot_type robot;

   typedef float _scale_type;
  _scale_type scale;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _home_type;
  _home_type home;

   typedef std::vector< ::kautham::fVector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kautham::fVector_<ContainerAllocator> >::other >  _limits_type;
  _limits_type limits;

   typedef std::vector< ::kautham::fVector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::kautham::fVector_<ContainerAllocator> >::other >  _mapMatrix_type;
  _mapMatrix_type mapMatrix;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _offMatrix_type;
  _offMatrix_type offMatrix;




  typedef boost::shared_ptr< ::kautham::AddRobotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kautham::AddRobotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddRobotRequest_

typedef ::kautham::AddRobotRequest_<std::allocator<void> > AddRobotRequest;

typedef boost::shared_ptr< ::kautham::AddRobotRequest > AddRobotRequestPtr;
typedef boost::shared_ptr< ::kautham::AddRobotRequest const> AddRobotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kautham::AddRobotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kautham::AddRobotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kautham

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kautham::AddRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kautham::AddRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kautham::AddRobotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kautham::AddRobotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kautham::AddRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kautham::AddRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kautham::AddRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c653a2cea0cdd7e7799a331e71f14a8";
  }

  static const char* value(const ::kautham::AddRobotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c653a2cea0cdd7eULL;
  static const uint64_t static_value2 = 0x7799a331e71f14a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::kautham::AddRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kautham/AddRobotRequest";
  }

  static const char* value(const ::kautham::AddRobotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kautham::AddRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot\n\
float32 scale\n\
float32[] home\n\
fVector[] limits\n\
fVector[] mapMatrix\n\
float32[] offMatrix\n\
\n\
================================================================================\n\
MSG: kautham/fVector\n\
float32[] v\n\
\n\
";
  }

  static const char* value(const ::kautham::AddRobotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kautham::AddRobotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot);
      stream.next(m.scale);
      stream.next(m.home);
      stream.next(m.limits);
      stream.next(m.mapMatrix);
      stream.next(m.offMatrix);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddRobotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kautham::AddRobotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kautham::AddRobotRequest_<ContainerAllocator>& v)
  {
    s << indent << "robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot);
    s << indent << "scale: ";
    Printer<float>::stream(s, indent + "  ", v.scale);
    s << indent << "home[]" << std::endl;
    for (size_t i = 0; i < v.home.size(); ++i)
    {
      s << indent << "  home[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.home[i]);
    }
    s << indent << "limits[]" << std::endl;
    for (size_t i = 0; i < v.limits.size(); ++i)
    {
      s << indent << "  limits[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kautham::fVector_<ContainerAllocator> >::stream(s, indent + "    ", v.limits[i]);
    }
    s << indent << "mapMatrix[]" << std::endl;
    for (size_t i = 0; i < v.mapMatrix.size(); ++i)
    {
      s << indent << "  mapMatrix[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::kautham::fVector_<ContainerAllocator> >::stream(s, indent + "    ", v.mapMatrix[i]);
    }
    s << indent << "offMatrix[]" << std::endl;
    for (size_t i = 0; i < v.offMatrix.size(); ++i)
    {
      s << indent << "  offMatrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.offMatrix[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KAUTHAM_MESSAGE_ADDROBOTREQUEST_H
